time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
View(time_list)
time_list[[1]]
ticker = c("TSLA")
devtools::load_all()
ncores = 2
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr", "purrr"),
.errorhandling = "pass") %dopar% {
time_vec <- time_list[[i]]
test <- purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = tickers_test[i],
...)
)
}
doParallel::stopImplicitCluster()
View(forecast_list)
ticker = c("TSLA", "AAPL")
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr", "purrr"),
.errorhandling = "pass") %dopar% {
time_vec <- time_list[[i]]
test <- purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i],
...)
)
}
View(forecast_list)
library(ps)
?ps
ticker = "AAPL"
N_tests = 100
n_tests = 100
ticker = c("TSLA", "AAPL")
n_tests = 20
ncores = 2
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
library(devtools)
load_all()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr", "purrr"),
.errorhandling = "pass") %dopar% {
time_vec <- time_list[[i]]
test <- purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i])
)
}
View(forecast_list)
renarin_short_historic(date = time_list[[1]][1], ticker = ticker[1])
View(forecast_list)
i <- 1
time_vec <- time_list[[i]]
test <- purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i])
)
View(forecast_list)
devtools::install()
ticker = c("TSLA", "AAPL")
n_tests = 100
ncores = 2
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
library(devtools)
load_all()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %dopar% {
time_vec <- time_list[[i]]
purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i])
)
}
View(forecast_list)
doParallel::stopImplicitCluster()
forecast_df <- bind_rows(forecast_df)
forecast_df <- dplyr::bind_rows(forecast_df)
forecast_df <- dplyr::bind_rows(forecast_list)
View(forecast_df)
ticker = "AAPL"
n_tests = 100
ncores = 2
vendor = "quandl"
comparison = "efficient_market"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
devtools::load_all()
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %dopar% {
time_vec <- time_list[[i]]
purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i])
)
}
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %dopar% {
time_vec <- time_list[[i]]
purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i],
vendor = vendor)
)
}
doParallel::stopImplicitCluster()
forecast_df <- dplyr::bind_rows(forecast_list)
View(forecast_df)
devtools::document()
devtools::install()
rm(list=ls())
ticker = c("AAPL", "TSLA")
n_test = 20
ncores = 2
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
devtools::load_all()
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
n_tests = 20
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %dopar% {
time_vec <- time_list[[i]]
purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i],
vendor = vendor, ...)
)
}
View(time_list)
time_list[[1]]
purrr::map(time_list[[1]] ~print(.x))
purrr::map(time_list[[1]], ~print(.x))
time_vec <- time_list[[1]]
time_vec
purrr::map(time_vec, ~print(.x))
time_vec <- as.character(time_list[[i]])
purrr::map(time_vec, ~print(.x))
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %dopar% {
time_vec <- as.character(time_list[[i]])
purrr::map(
time_vec,
~renarin_short_historic(.x,
ticker = ticker[i],
vendor = vendor, ...)
)
}
time_vec <- as.character(time_list[[i]])
time_vec
renarin_short_historic(time_vec[1], ticker = "AAPL", vendor = vendor)
renarin_short_historic(time_vec[1], ticker = "AAPL", vendor = vendor)
renarin_short_historic(time_list[[1]][1], ticker = "AAPL", vendor = vendor)
import(foreach)
library(foreach)
doParallel::stopImplicitCluster()
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr")) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
View(forecast_list)
forecast_df <- dplyr::bind_rows(forecast_list)
View(forecast_df)
devtools::install()
tickers <- get_sp500() %>% sample(size = 10)
ticker = tickers
devtools::load_all()
tickers <- get_sp500() %>% sample(size = 10)
ticker = tickers
n_tests = 1000
n_tests = 10
ncores = 4
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
View(time_list)
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr"),
.inorder = FALSE) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
library(foreach)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr"),
.inorder = FALSE) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
forecast_df <- dplyr::bind_rows(forecast_list)
View(forecast_df)
tickers <- get_sp500() %>% sample(size = 10)
n_tests = 20
ticker= tickers
doParallel::stopImplicitCluster()
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr"),
.inorder = FALSE) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
doParallel::stopImplicitCluster()
forecast_df <- dplyr::bind_rows(forecast_list)
forecast_list <- list()
for(i in 1:length(time_list)) {
for(j in 1:length(time_list[[i]])) {
forecast_list[[i]][j] renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
}
for(i in 1:length(time_list)) {
for(j in 1:length(time_list[[i]])) {
forecast_list[[i]][j] <- renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
}
?append
for(i in 1:length(time_list)) {
ticker_list <- list()
for(j in 1:length(time_list[[i]])) {
ticker_list[j] <- renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
forecast_list[i] <- ticker_list
}
warnings()
View(time_list)
View(ticker_list)
devtools::document()
devtools::check()
devtools::install()
devtools::install()
install.packages("tibble")
devtools::install()
install.packages("data.table")
devtools::install()
devtools::install()
install.packages("ps")
devtools::install()
devtools::install()
devtools::install()
devtools::load_all()
ticker = get_sp500() %>% sample(size = 100)
n_tests = 20
ncores = 1
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
ticker
key <- get_api_key(vendor = vendor)
Quandl::Quandl.api_key(key)
df <- Quandl::Quandl.datatable('SHARADAR/SEP', ticker= "FDX")
if(nrow(df) < n_tests) {
return(df$date)
} else {
df <- df %>%
dplyr::sample_n(size = n_tests)
return(df$date)
}
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker = ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
if(ncores == 1) {
forecast_list <- list()
for(i in 1:length(time_list)) {
ticker_list <- list()
for(j in 1:length(time_list[[i]])) {
ticker_list[[j]] <- renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor, ...)
}
forecast_list[[i]] <- ticker_list
}
} else {
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr"),
.inorder = FALSE) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor, ...)
}
doParallel::stopImplicitCluster()
}
if(ncores == 1) {
forecast_list <- list()
for(i in 1:length(time_list)) {
ticker_list <- list()
for(j in 1:length(time_list[[i]])) {
ticker_list[[j]] <- renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor)
}
forecast_list[[i]] <- ticker_list
}
} else {
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
forecast_list <-
foreach::foreach(i = 1:length(time_list),
.packages = c("stonkr")) %:%
foreach::foreach(j = 1:length(time_list[[i]]),
.packages = c("stonkr"),
.inorder = FALSE) %dopar%
{
renarin_short_historic(time_list[[i]][j],
ticker = ticker[i],
vendor = vendor, ...)
}
doParallel::stopImplicitCluster()
}
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker = ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
time_list[[i]] <- get_times(ticker = ticker[i], n_tests = n_tests, vendor = vendor)
ticker[i]
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
devtools::load_all()
ticker <- get_sp500() %>% sample(size = 100)
n_tests = 20
ncores = 1
vendor = "quandl"
#get a time_list for multiple tickers
time_list <- list()
if(length(ticker > 1)) {
for(i in 1:length(ticker)) {
time_list[[i]] <- get_times(ticker[i], n_tests = n_tests, vendor = vendor)
}
} else { #if theres only one ticker then ticker[i] will break so we have to use the below code
time_list[[1]] <- get_times(ticker, n_tests = n_tests, vendor = vendor)
}
key <- get_api_key(vendor = vendor)
Quandl::Quandl.api_key(key)
df <- Quandl::Quandl.datatable('SHARADAR/SEP', ticker= "PRGO")
Quandl::Quandl.api_key(key)
df <- Quandl::Quandl.datatable('SHARADAR/SEP', ticker= "PRGO")
